#include "asm_utils.h"

.global test_csr
.text

test_csr:

	# ABI prologue
	addi sp, sp, -112     # allocate 112 bytes on the stack
	sw x1, 104(sp)        # save return address
	sw x9, 96(sp)         # save callee-saved registers
	sw x10, 88(sp)
	sw x18, 80(sp)
	sw x19, 72(sp)
	sw x20, 64(sp)
	sw x21, 56(sp)
	sw x22, 48(sp)
	sw x23, 40(sp)
	sw x24, 32(sp)
	sw x25, 24(sp)
	sw x26, 16(sp)
	sw x27, 8(sp)
	addi s0, sp, 112     # set up s0 to point to start of stack frame
	li t0, 0x00104000    # save stack pointer
	sw sp, 0(t0)

	li x1,0
	li x2,0
	li x0,0
	nop
	nop
	nop
	GEN_BLOCK_CSR_REG(csrrw,0x300)
	GEN_BLOCK_CSR_REG(csrrw,0x305)
	GEN_BLOCK_CSR_REG(csrrw,0x341)
	GEN_BLOCK_CSR_REG(csrrw,0x342)
	GEN_BLOCK_CSR_REG(csrrw,0xC10)
	GEN_BLOCK_CSR_REG(csrrw,0xF14)
	GEN_BLOCK_CSR_REG(csrrw,0x014)
	GEN_BLOCK_CSR_REG(csrrw,0x342)
	GEN_BLOCK_CSR_REG(csrrw,0x780)
	GEN_BLOCK_CSR_REG(csrrw,0x781)
	GEN_BLOCK_CSR_REG(csrrw,0x782)
	GEN_BLOCK_CSR_REG(csrrw,0x783)
	GEN_BLOCK_CSR_REG(csrrw,0x784)
	GEN_BLOCK_CSR_REG(csrrw,0x785)
	GEN_BLOCK_CSR_REG(csrrw,0x786)
	GEN_BLOCK_CSR_REG(csrrw,0x787)
	GEN_BLOCK_CSR_REG(csrrw,0x788)
	GEN_BLOCK_CSR_REG(csrrw,0x789)
	GEN_BLOCK_CSR_REG(csrrw,0x78A)
	GEN_BLOCK_CSR_REG(csrrw,0x78B)
	GEN_BLOCK_CSR_REG(csrrw,0x78C)
	GEN_BLOCK_CSR_REG(csrrw,0x78D)
	GEN_BLOCK_CSR_REG(csrrw,0x78E)
	GEN_BLOCK_CSR_REG(csrrw,0x78F)
	GEN_BLOCK_CSR_REG(csrrw,0x790)
	GEN_BLOCK_CSR_REG(csrrw,0x791)
	GEN_BLOCK_CSR_REG(csrrw,0x792)
	GEN_BLOCK_CSR_REG(csrrw,0x793)
	GEN_BLOCK_CSR_REG(csrrw,0x794)
	GEN_BLOCK_CSR_REG(csrrw,0x795)
	GEN_BLOCK_CSR_REG(csrrw,0x796)
	GEN_BLOCK_CSR_REG(csrrw,0x797)
	GEN_BLOCK_CSR_REG(csrrw,0x798)
	GEN_BLOCK_CSR_REG(csrrw,0x799)
	GEN_BLOCK_CSR_REG(csrrw,0x79A)
	GEN_BLOCK_CSR_REG(csrrw,0x79B)
	GEN_BLOCK_CSR_REG(csrrw,0x79C)
	GEN_BLOCK_CSR_REG(csrrw,0x79D)
	GEN_BLOCK_CSR_REG(csrrw,0x79E)
	GEN_BLOCK_CSR_REG(csrrw,0x79F)
	GEN_BLOCK_CSR_REG(csrrw,0x7A0)
	GEN_BLOCK_CSR_REG(csrrw,0x7A1)
	GEN_BLOCK_CSR_REG(csrrw,0x7B0)
	GEN_BLOCK_CSR_REG(csrrw,0x7B1)
	GEN_BLOCK_CSR_REG(csrrw,0x7B2)
	GEN_BLOCK_CSR_REG(csrrw,0x7B3)
	GEN_BLOCK_CSR_REG(csrrw,0x7B4)
	GEN_BLOCK_CSR_REG(csrrw,0x7B5)
	GEN_BLOCK_CSR_REG(csrrw,0x7B6)
	GEN_BLOCK_CSR_REG(csrrw,0x7B7)
	GEN_BLOCK_CSR_REG(csrrs,0x300)
	GEN_BLOCK_CSR_REG(csrrs,0x305)
	GEN_BLOCK_CSR_REG(csrrs,0x341)
	GEN_BLOCK_CSR_REG(csrrs,0x342)
	GEN_BLOCK_CSR_REG(csrrs,0xC10)
	GEN_BLOCK_CSR_REG(csrrs,0xF14)
	GEN_BLOCK_CSR_REG(csrrs,0x014)
	GEN_BLOCK_CSR_REG(csrrs,0x7A1)
	GEN_BLOCK_CSR_REG(csrrs,0x780)
	GEN_BLOCK_CSR_REG(csrrs,0x781)
	GEN_BLOCK_CSR_REG(csrrs,0x782)
	GEN_BLOCK_CSR_REG(csrrs,0x783)
	GEN_BLOCK_CSR_REG(csrrs,0x784)
	GEN_BLOCK_CSR_REG(csrrs,0x785)
	GEN_BLOCK_CSR_REG(csrrs,0x786)
	GEN_BLOCK_CSR_REG(csrrs,0x787)
	GEN_BLOCK_CSR_REG(csrrs,0x788)
	GEN_BLOCK_CSR_REG(csrrs,0x789)
	GEN_BLOCK_CSR_REG(csrrs,0x78A)
	GEN_BLOCK_CSR_REG(csrrs,0x78B)
	GEN_BLOCK_CSR_REG(csrrs,0x78C)
	GEN_BLOCK_CSR_REG(csrrs,0x78D)
	GEN_BLOCK_CSR_REG(csrrs,0x78E)
	GEN_BLOCK_CSR_REG(csrrs,0x78F)
	GEN_BLOCK_CSR_REG(csrrs,0x790)
	GEN_BLOCK_CSR_REG(csrrs,0x791)
	GEN_BLOCK_CSR_REG(csrrs,0x792)
	GEN_BLOCK_CSR_REG(csrrs,0x793)
	GEN_BLOCK_CSR_REG(csrrs,0x794)
	GEN_BLOCK_CSR_REG(csrrs,0x795)
	GEN_BLOCK_CSR_REG(csrrs,0x796)
	GEN_BLOCK_CSR_REG(csrrs,0x797)
	GEN_BLOCK_CSR_REG(csrrs,0x798)
	GEN_BLOCK_CSR_REG(csrrs,0x799)
	GEN_BLOCK_CSR_REG(csrrs,0x79A)
	GEN_BLOCK_CSR_REG(csrrs,0x79B)
	GEN_BLOCK_CSR_REG(csrrs,0x79C)
	GEN_BLOCK_CSR_REG(csrrs,0x79D)
	GEN_BLOCK_CSR_REG(csrrs,0x79E)
	GEN_BLOCK_CSR_REG(csrrs,0x79F)
	GEN_BLOCK_CSR_REG(csrrs,0x7A0)
	GEN_BLOCK_CSR_REG(csrrs,0x7B0)
	GEN_BLOCK_CSR_REG(csrrs,0x7B1)
	GEN_BLOCK_CSR_REG(csrrs,0x7B2)
	GEN_BLOCK_CSR_REG(csrrs,0x7B3)
	GEN_BLOCK_CSR_REG(csrrs,0x7B4)
	GEN_BLOCK_CSR_REG(csrrs,0x7B5)
	GEN_BLOCK_CSR_REG(csrrs,0x7B6)
	GEN_BLOCK_CSR_REG(csrrs,0x7B7)
	GEN_BLOCK_CSR_REG(csrrc,0x300)
	GEN_BLOCK_CSR_REG(csrrc,0x305)
	GEN_BLOCK_CSR_REG(csrrc,0x341)
	GEN_BLOCK_CSR_REG(csrrc,0x342)
	GEN_BLOCK_CSR_REG(csrrc,0xC10)
	GEN_BLOCK_CSR_REG(csrrc,0xF14)
	GEN_BLOCK_CSR_REG(csrrc,0x014)
	GEN_BLOCK_CSR_REG(csrrc,0x7A1)
	GEN_BLOCK_CSR_REG(csrrc,0x780)
	GEN_BLOCK_CSR_REG(csrrc,0x781)
	GEN_BLOCK_CSR_REG(csrrc,0x782)
	GEN_BLOCK_CSR_REG(csrrc,0x783)
	GEN_BLOCK_CSR_REG(csrrc,0x784)
	GEN_BLOCK_CSR_REG(csrrc,0x785)
	GEN_BLOCK_CSR_REG(csrrc,0x786)
	GEN_BLOCK_CSR_REG(csrrc,0x787)
	GEN_BLOCK_CSR_REG(csrrc,0x788)
	GEN_BLOCK_CSR_REG(csrrc,0x789)
	GEN_BLOCK_CSR_REG(csrrc,0x78A)
	GEN_BLOCK_CSR_REG(csrrc,0x78B)
	GEN_BLOCK_CSR_REG(csrrc,0x78C)
	GEN_BLOCK_CSR_REG(csrrc,0x78D)
	GEN_BLOCK_CSR_REG(csrrc,0x78E)
	GEN_BLOCK_CSR_REG(csrrc,0x78F)
	GEN_BLOCK_CSR_REG(csrrc,0x790)
	GEN_BLOCK_CSR_REG(csrrc,0x791)
	GEN_BLOCK_CSR_REG(csrrc,0x792)
	GEN_BLOCK_CSR_REG(csrrc,0x793)
	GEN_BLOCK_CSR_REG(csrrc,0x794)
	GEN_BLOCK_CSR_REG(csrrc,0x795)
	GEN_BLOCK_CSR_REG(csrrc,0x796)
	GEN_BLOCK_CSR_REG(csrrc,0x79F)
	GEN_BLOCK_CSR_REG(csrrc,0x7A0)
	GEN_BLOCK_CSR_REG(csrrc,0x7B0)
	GEN_BLOCK_CSR_REG(csrrc,0x7B1)
	GEN_BLOCK_CSR_REG(csrrc,0x7B2)
	GEN_BLOCK_CSR_REG(csrrc,0x7B3)
	GEN_BLOCK_CSR_REG(csrrc,0x7B4)
	GEN_BLOCK_CSR_REG(csrrc,0x7B5)
	GEN_BLOCK_CSR_REG(csrrc,0x7B6)
	GEN_BLOCK_CSR_REG(csrrc,0x7B7)
	GEN_BLOCK_CSR_IMM(csrrwi,0x300,1)
	GEN_BLOCK_CSR_IMM(csrrwi,0x305,3)
	GEN_BLOCK_CSR_IMM(csrrwi,0x341,7)
	GEN_BLOCK_CSR_IMM(csrrwi,0x342,10)
	GEN_BLOCK_CSR_IMM(csrrwi,0xC10,21)
	GEN_BLOCK_CSR_IMM(csrrwi,0xF14,1)
	GEN_BLOCK_CSR_IMM(csrrwi,0x014,3)
	GEN_BLOCK_CSR_IMM(csrrwi,0x7A1,7)
	GEN_BLOCK_CSR_IMM(csrrwi,0x780,10)
	GEN_BLOCK_CSR_IMM(csrrwi,0x79F,21)
	GEN_BLOCK_CSR_IMM(csrrwi,0x7A0,1)
	GEN_BLOCK_CSR_IMM(csrrwi,0x7B0,3)
	GEN_BLOCK_CSR_IMM(csrrwi,0x7B7,7)
	GEN_BLOCK_CSR_IMM(csrrsi,0x300,28)
	GEN_BLOCK_CSR_IMM(csrrsi,0x305,30)
	GEN_BLOCK_CSR_IMM(csrrsi,0x341,31)
	GEN_BLOCK_CSR_IMM(csrrsi,0x342,4)
	GEN_BLOCK_CSR_IMM(csrrsi,0xC10,16)
	GEN_BLOCK_CSR_IMM(csrrsi,0xF14,28)
	GEN_BLOCK_CSR_IMM(csrrsi,0x014,30)
	GEN_BLOCK_CSR_IMM(csrrsi,0x7A1,31)
	GEN_BLOCK_CSR_IMM(csrrsi,0x780,4)
	GEN_BLOCK_CSR_IMM(csrrsi,0x79F,16)
	GEN_BLOCK_CSR_IMM(csrrsi,0x7A0,28)
	GEN_BLOCK_CSR_IMM(csrrsi,0x7B0,30)
	GEN_BLOCK_CSR_IMM(csrrsi,0x7B7,31)
	GEN_BLOCK_CSR_IMM(csrrci,0x300,18)
	GEN_BLOCK_CSR_IMM(csrrci,0x305,20)
	GEN_BLOCK_CSR_IMM(csrrci,0x341,0)
	GEN_BLOCK_CSR_IMM(csrrci,0x342,5)
	GEN_BLOCK_CSR_IMM(csrrci,0xC10,8)
	GEN_BLOCK_CSR_IMM(csrrci,0xF14,18)
	GEN_BLOCK_CSR_IMM(csrrci,0x014,20)
	GEN_BLOCK_CSR_IMM(csrrci,0x7A1,0)
	GEN_BLOCK_CSR_IMM(csrrci,0x780,5)
	GEN_BLOCK_CSR_IMM(csrrci,0x79F,8)
	GEN_BLOCK_CSR_IMM(csrrci,0x7A0,18)
	GEN_BLOCK_CSR_IMM(csrrci,0x7B0,20)
	GEN_BLOCK_CSR_IMM(csrrci,0x7B7,0)

	# ABI epilogue
	li t0, 0x00104000    # restore stack pointer
	lw sp, 0(t0)
	lw x27, 8(sp)        # restore callee-saved registers
	lw x26, 16(sp)
	lw x25, 24(sp)
	lw x24, 32(sp)
	lw x23, 40(sp)
	lw x22, 48(sp)
	lw x21, 56(sp)
	lw x20, 64(sp)
	lw x19, 72(sp)
	lw x18, 80(sp)
	lw x10, 88(sp)
	lw x9, 96(sp)
	lw x1, 104(sp)       # restore return address
	addi sp, sp, 112     # deallocate stack space
	jr ra                # return to caller


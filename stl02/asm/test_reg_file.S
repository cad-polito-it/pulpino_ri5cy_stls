#include "asm_utils.h"

.global test_reg_file
.text

test_reg_file:

	# ABI prologue
	addi sp, sp, -112     # allocate 112 bytes on the stack
	sw x1, 104(sp)        # save return address
	sw x9, 96(sp)         # save callee-saved registers
	sw x10, 88(sp)
	sw x18, 80(sp)
	sw x19, 72(sp)
	sw x20, 64(sp)
	sw x21, 56(sp)
	sw x22, 48(sp)
	sw x23, 40(sp)
	sw x24, 32(sp)
	sw x25, 24(sp)
	sw x26, 16(sp)
	sw x27, 8(sp)
	addi s0, sp, 112     # set up s0 to point to start of stack frame
	li t0, 0x00104000    # save stack pointer
	sw sp, 0(t0)
	
march_test:
	LI_ALL_REGISTER(0x00000000)
	MARCH_ELEMENT_MAP(x0, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x1, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x2, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x3, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x4, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x5, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x6, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x7, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x8, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x9, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x10, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x11, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x12, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x13, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x14, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x15, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x16, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x17, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x18, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x19, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x20, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x21, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x22, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x23, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x24, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x25, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x26, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x27, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x28, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x29, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x30, 0xFFFFFFFF)
	MARCH_ELEMENT_MAP(x31, 0xFFFFFFFF)
	nop
	nop
	nop
	nop
	MARCH_ELEMENT_MAP(x31, 0x00000000)
	MARCH_ELEMENT_MAP(x30, 0x00000000)
	MARCH_ELEMENT_MAP(x29, 0x00000000)
	MARCH_ELEMENT_MAP(x28, 0x00000000)
	MARCH_ELEMENT_MAP(x27, 0x00000000)
	MARCH_ELEMENT_MAP(x26, 0x00000000)
	MARCH_ELEMENT_MAP(x25, 0x00000000)
	MARCH_ELEMENT_MAP(x24, 0x00000000)
	MARCH_ELEMENT_MAP(x23, 0x00000000)
	MARCH_ELEMENT_MAP(x22, 0x00000000)
	MARCH_ELEMENT_MAP(x21, 0x00000000)
	MARCH_ELEMENT_MAP(x20, 0x00000000)
	MARCH_ELEMENT_MAP(x19, 0x00000000)
	MARCH_ELEMENT_MAP(x18, 0x00000000)
	MARCH_ELEMENT_MAP(x17, 0x00000000)
	MARCH_ELEMENT_MAP(x16, 0x00000000)
	MARCH_ELEMENT_MAP(x15, 0x00000000)
	MARCH_ELEMENT_MAP(x14, 0x00000000)
	MARCH_ELEMENT_MAP(x13, 0x00000000)
	MARCH_ELEMENT_MAP(x12, 0x00000000)
	MARCH_ELEMENT_MAP(x11, 0x00000000)
	MARCH_ELEMENT_MAP(x10, 0x00000000)
	MARCH_ELEMENT_MAP(x9, 0x00000000)
	MARCH_ELEMENT_MAP(x8, 0x00000000)
	MARCH_ELEMENT_MAP(x7, 0x00000000)
	MARCH_ELEMENT_MAP(x6, 0x00000000)
	MARCH_ELEMENT_MAP(x5, 0x00000000)
	MARCH_ELEMENT_MAP(x4, 0x00000000)
	MARCH_ELEMENT_MAP(x3, 0x00000000)
	MARCH_ELEMENT_MAP(x2, 0x00000000)
	MARCH_ELEMENT_MAP(x1, 0x00000000)
	MARCH_ELEMENT_MAP(x0, 0x00000000)


test_reg_file_alu:
	LI_ALL_REGISTER(0x00000000)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x1)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x2)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x3)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x4)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x5)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x6)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x7)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x8)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x9)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x10)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x11)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x12)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x13)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x14)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x15)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x16)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x17)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x18)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x19)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x20)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x21)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x22)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x23)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x24)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x25)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x26)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x27)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x28)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x29)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x30)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0xFFFFFFFF, x31)

	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x1)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x2)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x3)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x4)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x5)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x6)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x7)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x8)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x9)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x10)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x11)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x12)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x13)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x14)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x15)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x16)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x17)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x18)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x19)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x20)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x21)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x22)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x23)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x24)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x25)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x26)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x27)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x28)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x29)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x30)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x00000000, x31)

	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x1)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x2)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x3)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x4)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x5)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x6)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x7)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x8)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x9)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x10)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x11)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x12)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x13)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x14)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x15)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x16)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x17)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x18)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x19)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x20)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x21)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x22)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x23)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x24)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x25)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x26)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x27)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x28)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x29)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x30)
	GEN_BLOCK_RF_ALU_OP(p.mac, 0x0000FFFF, x31)


load_test:
	li x0, 0
	nop
	nop
	nop
	li x1, 0xFFFFFFFF
	nop
	nop
	nop
	nop
	sw x1, 0(x0)
	nop
	nop
	nop
	nop
	GEN_BLOCK_RF_LOAD(x1)
	GEN_BLOCK_RF_LOAD(x2)
	GEN_BLOCK_RF_LOAD(x3)
	GEN_BLOCK_RF_LOAD(x4)
	GEN_BLOCK_RF_LOAD(x5)
	GEN_BLOCK_RF_LOAD(x6)
	GEN_BLOCK_RF_LOAD(x7)
	GEN_BLOCK_RF_LOAD(x8)
	GEN_BLOCK_RF_LOAD(x9)
	GEN_BLOCK_RF_LOAD(x10)
	GEN_BLOCK_RF_LOAD(x11)
	GEN_BLOCK_RF_LOAD(x12)
	GEN_BLOCK_RF_LOAD(x13)
	GEN_BLOCK_RF_LOAD(x14)
	GEN_BLOCK_RF_LOAD(x15)
	GEN_BLOCK_RF_LOAD(x16)
	GEN_BLOCK_RF_LOAD(x17)
	GEN_BLOCK_RF_LOAD(x18)
	GEN_BLOCK_RF_LOAD(x19)
	GEN_BLOCK_RF_LOAD(x20)
	GEN_BLOCK_RF_LOAD(x21)
	GEN_BLOCK_RF_LOAD(x22)
	GEN_BLOCK_RF_LOAD(x23)
	GEN_BLOCK_RF_LOAD(x24)
	GEN_BLOCK_RF_LOAD(x25)
	GEN_BLOCK_RF_LOAD(x26)
	GEN_BLOCK_RF_LOAD(x27)
	GEN_BLOCK_RF_LOAD(x28)
	GEN_BLOCK_RF_LOAD(x29)
	GEN_BLOCK_RF_LOAD(x30)
	GEN_BLOCK_RF_LOAD(x31)

	li x0, 0
	nop
	nop
	nop
	li x1, 0x00000000
	nop
	nop
	nop
	nop
	sw x1, 0(x0)
	nop
	nop
	nop
	nop
	GEN_BLOCK_RF_LOAD(x31)
	GEN_BLOCK_RF_LOAD(x30)
	GEN_BLOCK_RF_LOAD(x29)
	GEN_BLOCK_RF_LOAD(x28)
	GEN_BLOCK_RF_LOAD(x27)
	GEN_BLOCK_RF_LOAD(x26)
	GEN_BLOCK_RF_LOAD(x25)
	GEN_BLOCK_RF_LOAD(x24)
	GEN_BLOCK_RF_LOAD(x23)
	GEN_BLOCK_RF_LOAD(x22)
	GEN_BLOCK_RF_LOAD(x21)
	GEN_BLOCK_RF_LOAD(x20)
	GEN_BLOCK_RF_LOAD(x19)
	GEN_BLOCK_RF_LOAD(x18)
	GEN_BLOCK_RF_LOAD(x17)
	GEN_BLOCK_RF_LOAD(x16)
	GEN_BLOCK_RF_LOAD(x15)
	GEN_BLOCK_RF_LOAD(x14)
	GEN_BLOCK_RF_LOAD(x13)
	GEN_BLOCK_RF_LOAD(x12)
	GEN_BLOCK_RF_LOAD(x11)
	GEN_BLOCK_RF_LOAD(x10)
	GEN_BLOCK_RF_LOAD(x9)
	GEN_BLOCK_RF_LOAD(x8)
	GEN_BLOCK_RF_LOAD(x7)
	GEN_BLOCK_RF_LOAD(x6)
	GEN_BLOCK_RF_LOAD(x5)
	GEN_BLOCK_RF_LOAD(x4)
	GEN_BLOCK_RF_LOAD(x3)
	GEN_BLOCK_RF_LOAD(x2)
	GEN_BLOCK_RF_LOAD(x1)

	# ABI epilogue
	li t0, 0x00104000    # restore stack pointer
	lw sp, 0(t0)
	lw x27, 8(sp)        # restore callee-saved registers
	lw x26, 16(sp)
	lw x25, 24(sp)
	lw x24, 32(sp)
	lw x23, 40(sp)
	lw x22, 48(sp)
	lw x21, 56(sp)
	lw x20, 64(sp)
	lw x19, 72(sp)
	lw x18, 80(sp)
	lw x10, 88(sp)
	lw x9, 96(sp)
	lw x1, 104(sp)       # restore return address
	addi sp, sp, 112     # deallocate stack space
	jr ra                # return to caller
